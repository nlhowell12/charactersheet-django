# Generated by Django 2.2.7 on 2019-12-11 17:54

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AttributeBonus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute', models.CharField(choices=[('strength', 'Strength'), ('dexterity', 'Dexterity'), ('constitution', 'Constituion'), ('intelligence', 'Intelligence'), ('wisdom', 'Wisdom'), ('charisma', 'Charisma')], default='strength', max_length=20)),
                ('bonus', models.IntegerField()),
                ('bonus_type', models.CharField(choices=[('alch', 'Alchemical'), ('armor', 'Armor'), ('circ', 'Circumstance'), ('comp', 'Competence'), ('def', 'Deflection'), ('div', 'Divine'), ('dodge', 'Dodge'), ('enh', 'Enhancement'), ('epic', 'Epic'), ('exal', 'Exalted'), ('ins', 'Insight'), ('luck', 'Luck'), ('morale', 'Morale'), ('nat', 'Natural Armor'), ('prof', 'Profane'), ('racial', 'Racial'), ('resist', 'Resistance'), ('sacred', 'Sacred'), ('shield', 'Shield'), ('sice', 'Size'), ('untyped', 'Untyped')], default='untyped', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='BaseClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(max_length=20)),
                ('hit_die', models.IntegerField(choices=[(4, 'd4'), (6, 'd6'), (8, 'd8'), (10, 'd10'), (12, 'd12')], default=4)),
                ('skill_points', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(2)])),
            ],
        ),
        migrations.CreateModel(
            name='ClassAbility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50)),
                ('description', models.TextField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(max_length=50)),
                ('weight', models.IntegerField()),
                ('description', models.TextField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('racial_name', models.CharField(max_length=15)),
                ('description', models.TextField()),
                ('special_abilities', models.TextField()),
                ('playable', models.BooleanField(default=False)),
                ('attribute_bonuses', models.ManyToManyField(related_name='_race_attribute_bonuses_+', to='characters.AttributeBonus')),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_name', models.CharField(max_length=50)),
                ('description', models.TextField(max_length=1500)),
                ('synergies', models.ManyToManyField(blank=True, related_name='_skill_synergies_+', to='characters.Skill')),
            ],
        ),
        migrations.CreateModel(
            name='SkillBonus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bonus', models.IntegerField()),
                ('bonus_type', models.CharField(choices=[('alch', 'Alchemical'), ('armor', 'Armor'), ('circ', 'Circumstance'), ('comp', 'Competence'), ('def', 'Deflection'), ('div', 'Divine'), ('dodge', 'Dodge'), ('enh', 'Enhancement'), ('epic', 'Epic'), ('exal', 'Exalted'), ('ins', 'Insight'), ('luck', 'Luck'), ('morale', 'Morale'), ('nat', 'Natural Armor'), ('prof', 'Profane'), ('racial', 'Racial'), ('resist', 'Resistance'), ('sacred', 'Sacred'), ('shield', 'Shield'), ('sice', 'Size'), ('untyped', 'Untyped')], default='untyped', max_length=10)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.Skill')),
            ],
        ),
        migrations.CreateModel(
            name='Armor',
            fields=[
                ('equipment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='characters.Equipment')),
                ('armor_bonus', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(8)])),
                ('bonus_type', models.CharField(choices=[('alch', 'Alchemical'), ('armor', 'Armor'), ('circ', 'Circumstance'), ('comp', 'Competence'), ('def', 'Deflection'), ('div', 'Divine'), ('dodge', 'Dodge'), ('enh', 'Enhancement'), ('epic', 'Epic'), ('exal', 'Exalted'), ('ins', 'Insight'), ('luck', 'Luck'), ('morale', 'Morale'), ('nat', 'Natural Armor'), ('prof', 'Profane'), ('racial', 'Racial'), ('resist', 'Resistance'), ('sacred', 'Sacred'), ('shield', 'Shield'), ('sice', 'Size'), ('untyped', 'Untyped')], default='armor', max_length=10)),
                ('armor_check_penalty', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('movement_penalty', models.IntegerField(choices=[(0, 'None'), (5, '5 ft'), (10, '10 ft')], default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('spell_failure_chance', models.IntegerField(choices=[(0, 'None'), (5, '5%'), (10, '10%'), (15, '15%'), (20, '20%'), (25, '25%'), (30, '30%'), (35, '35%'), (40, '40%'), (50, '50%')], default=0)),
            ],
            bases=('characters.equipment',),
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('equipment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='characters.Equipment')),
                ('damage_dice', models.CharField(max_length=5)),
                ('two_handed', models.BooleanField(default=False)),
                ('crit_range', models.CharField(default='20/x2', max_length=10)),
                ('range_increment', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
            ],
            bases=('characters.equipment',),
        ),
        migrations.CreateModel(
            name='Subrace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subrace_name', models.CharField(max_length=30)),
                ('description', models.TextField()),
                ('special_abilities', models.TextField()),
                ('attribute_bonuses', models.ManyToManyField(related_name='_subrace_attribute_bonuses_+', to='characters.AttributeBonus')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.Race')),
                ('skill_bonuses', models.ManyToManyField(related_name='_subrace_skill_bonuses_+', to='characters.SkillBonus')),
            ],
        ),
        migrations.AddField(
            model_name='race',
            name='skill_bonuses',
            field=models.ManyToManyField(related_name='_race_skill_bonuses_+', to='characters.SkillBonus'),
        ),
        migrations.CreateModel(
            name='Feat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feat_name', models.CharField(max_length=50)),
                ('benefit', models.TextField(max_length=1000)),
                ('prerequisites', models.TextField(max_length=1000)),
                ('attribute_bonuses', models.ManyToManyField(related_name='_feat_attribute_bonuses_+', to='characters.AttributeBonus')),
                ('skill_bonuses', models.ManyToManyField(related_name='_feat_skill_bonuses_+', to='characters.SkillBonus')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.Skill')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('base_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='characters.BaseClass')),
            ],
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('character_Name', models.CharField(max_length=50)),
                ('hair_Color', models.CharField(blank=True, max_length=16, null=True)),
                ('eye_Color', models.CharField(blank=True, max_length=16, null=True)),
                ('height', models.CharField(blank=True, help_text='Height typically in feet', max_length=6, null=True)),
                ('weight', models.IntegerField(blank=True, default=100, help_text='Weight in lbs', validators=[django.core.validators.MinValueValidator(1)])),
                ('age', models.IntegerField(blank=True, default=25, validators=[django.core.validators.MinValueValidator(1)])),
                ('max_HP', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('current_HP', models.IntegerField(default=1)),
                ('base_Strength', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('base_Dexterity', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('base_Constitution', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('base_Intelligence', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('base_Wisdom', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('base_Charisma', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('personal_Traits', models.TextField(blank=True, default='')),
                ('ideals', models.TextField(blank=True, default='')),
                ('flaws', models.TextField(blank=True, default='')),
                ('notes', models.TextField(blank=True, default='')),
                ('sex', models.IntegerField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('alignment', models.CharField(choices=[('LG', 'Lawful Good'), ('NG', 'Neutral Good'), ('CG', 'Chaotic Good'), ('LN', 'Lawful Neutral'), ('N', 'True Neutral'), ('CN', 'Chaotic Neutral'), ('LE', 'Lawful Evil'), ('NE', 'Neutral Evil'), ('CE', 'Chaotic Evil')], default='LG', max_length=2)),
                ('zodiac_Sign', models.CharField(choices=[('Aries', 'Aries'), ('Leo', 'Leo'), ('Cancer', 'Cancer'), ('Pisces', 'Pisces'), ('Scorpio', 'Scorpio'), ('Taurus', 'Taurus'), ('Sagittarius', 'Sagittarius'), ('Gemini', 'Gemini'), ('Virgo', 'Virgo'), ('Libra', 'Libra'), ('Caricorn', 'Capricorn'), ('Aquarius', 'Aquarius')], default=0, max_length=20)),
                ('DM', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DM', to=settings.AUTH_USER_MODEL)),
                ('character_Classes', models.ManyToManyField(related_name='character_class', to='characters.CharacterClass')),
                ('feats', models.ManyToManyField(blank=True, related_name='_character_feats_+', to='characters.Feat')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='player', to=settings.AUTH_USER_MODEL)),
                ('race', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.Race')),
                ('skills', models.ManyToManyField(blank=True, related_name='_character_skills_+', to='characters.CharacterSkill')),
            ],
        ),
        migrations.AddField(
            model_name='baseclass',
            name='class_abilities',
            field=models.ManyToManyField(to='characters.ClassAbility'),
        ),
        migrations.AddField(
            model_name='baseclass',
            name='class_skills',
            field=models.ManyToManyField(related_name='_baseclass_class_skills_+', to='characters.Skill'),
        ),
    ]
