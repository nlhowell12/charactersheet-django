# Generated by Django 2.2.7 on 2019-12-17 18:32

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(max_length=20)),
                ('hit_die', models.IntegerField(choices=[(4, 'd4'), (6, 'd6'), (8, 'd8'), (10, 'd10'), (12, 'd12')], default=4)),
                ('skill_points', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(2)])),
                ('fort', models.CharField(choices=[('Good', 'Good'), ('Poor', 'Poor')], default='Poor', max_length=4)),
                ('reflex', models.CharField(choices=[('Good', 'Good'), ('Poor', 'Poor')], default='Poor', max_length=4)),
                ('will', models.CharField(choices=[('Good', 'Good'), ('Poor', 'Poor')], default='Poor', max_length=4)),
            ],
            options={
                'verbose_name_plural': 'Classes',
            },
        ),
        migrations.CreateModel(
            name='ClassAbility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50)),
                ('description', models.TextField(max_length=1000)),
            ],
            options={
                'verbose_name_plural': 'Class Abilities',
            },
        ),
        migrations.CreateModel(
            name='Feat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feat_name', models.CharField(max_length=50)),
                ('benefit', models.TextField(max_length=1000)),
                ('prerequisites', models.TextField(max_length=1000)),
                ('attribute_bonuses', models.CharField(blank=True, max_length=50, null=True)),
                ('skill_bonuses', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('racial_name', models.CharField(max_length=15)),
                ('attribute_bonuses', models.CharField(blank=True, max_length=50, null=True)),
                ('skill_bonuses', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField()),
                ('special_abilities', models.TextField()),
                ('playable', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_name', models.CharField(max_length=50)),
                ('synergies', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(max_length=1500)),
            ],
        ),
        migrations.CreateModel(
            name='Subrace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subrace_name', models.CharField(max_length=30)),
                ('attribute_bonuses', models.CharField(blank=True, max_length=50, null=True)),
                ('skill_bonuses', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField()),
                ('special_abilities', models.TextField()),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.Race')),
            ],
            options={
                'verbose_name_plural': 'Sub-Races',
            },
        ),
        migrations.CreateModel(
            name='CharacterSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.Skill')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('base_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='characters.BaseClass')),
            ],
            options={
                'verbose_name_plural': 'Character Classes',
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('character_Name', models.CharField(max_length=50)),
                ('hair_Color', models.CharField(blank=True, max_length=16, null=True)),
                ('eye_Color', models.CharField(blank=True, max_length=16, null=True)),
                ('height', models.CharField(blank=True, help_text='Height typically in feet', max_length=6, null=True)),
                ('weight', models.IntegerField(blank=True, default=100, help_text='Weight in lbs', validators=[django.core.validators.MinValueValidator(1)])),
                ('age', models.IntegerField(blank=True, default=25, validators=[django.core.validators.MinValueValidator(1)])),
                ('max_HP', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('current_HP', models.IntegerField(default=1)),
                ('base_Strength', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('base_Dexterity', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('base_Constitution', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('base_Intelligence', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('base_Wisdom', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('base_Charisma', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('personal_Traits', models.TextField(blank=True, default='')),
                ('ideals', models.TextField(blank=True, default='')),
                ('flaws', models.TextField(blank=True, default='')),
                ('notes', models.TextField(blank=True, default='')),
                ('sex', models.IntegerField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('alignment', models.CharField(choices=[('LG', 'Lawful Good'), ('NG', 'Neutral Good'), ('CG', 'Chaotic Good'), ('LN', 'Lawful Neutral'), ('N', 'True Neutral'), ('CN', 'Chaotic Neutral'), ('LE', 'Lawful Evil'), ('NE', 'Neutral Evil'), ('CE', 'Chaotic Evil')], default='LG', max_length=2)),
                ('zodiac_Sign', models.CharField(choices=[('Aries', 'Aries'), ('Leo', 'Leo'), ('Cancer', 'Cancer'), ('Pisces', 'Pisces'), ('Scorpio', 'Scorpio'), ('Taurus', 'Taurus'), ('Sagittarius', 'Sagittarius'), ('Gemini', 'Gemini'), ('Virgo', 'Virgo'), ('Libra', 'Libra'), ('Caricorn', 'Capricorn'), ('Aquarius', 'Aquarius')], default=0, max_length=20)),
                ('DM', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DM', to=settings.AUTH_USER_MODEL)),
                ('character_Classes', models.ManyToManyField(related_name='character_class', to='characters.CharacterClass')),
                ('feats', models.ManyToManyField(blank=True, related_name='_character_feats_+', to='characters.Feat')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='player', to=settings.AUTH_USER_MODEL)),
                ('race', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.Race')),
                ('skills', models.ManyToManyField(blank=True, related_name='_character_skills_+', to='characters.CharacterSkill')),
            ],
        ),
        migrations.AddField(
            model_name='baseclass',
            name='class_abilities',
            field=models.ManyToManyField(to='characters.ClassAbility'),
        ),
        migrations.AddField(
            model_name='baseclass',
            name='class_skills',
            field=models.ManyToManyField(related_name='_baseclass_class_skills_+', to='characters.Skill'),
        ),
    ]
